package com.krakedev.inventarios.bdd;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;

import com.krakedev.inventarios.entidades.CabeceraVentas;
import com.krakedev.inventarios.entidades.DetalleVentas;
import com.krakedev.inventarios.excepciones.KrakeDevException;
import com.krakedev.inventarios.utils.ConexionBDD;

public class VentasBDD {
	public void insertar(CabeceraVentas ventas) throws KrakeDevException {
		Connection con = null;
		PreparedStatement ps=null;
		PreparedStatement ps1=null;
		PreparedStatement psDet=null;
		ResultSet rsClave=null;
		PreparedStatement psHis=null;
		int codigoCabecera=0;
		
		Date fechaActual=new Date();
		Timestamp fechaHoraActual=new Timestamp(fechaActual.getTime());
		
		try {
			con=ConexionBDD.obtenerConexion();
			ps=con.prepareStatement("insert into cabecera_ventas (fecha,total_sin_iva,iva,total) "
					+ "values (?,?,?,?)",Statement.RETURN_GENERATED_KEYS);
			ps.setTimestamp(1, fechaHoraActual);
			ps.setBigDecimal(2, new BigDecimal(0));
			ps.setBigDecimal(3, new BigDecimal(0));
			ps.setBigDecimal(4, new BigDecimal(0));
			
			ps.executeUpdate();
			
			rsClave=ps.getGeneratedKeys();
			if(rsClave.next()) {
				codigoCabecera=rsClave.getInt(1);
			}
			
			ArrayList<DetalleVentas> detallesVentas=ventas.getDetalles();
			DetalleVentas det;
			for(int i=0;i<detallesVentas.size();i++) {
				det=detallesVentas.get(i);
				psDet=con.prepareStatement("insert into detalle_ventas(cabecera_ventas,producto,cantidad,precio_venta,subtotal,subtotal_con_iva) "
						+ "values(?,?,?,?,?,?);");
				psDet.setInt(1, codigoCabecera);
				psDet.setInt(2, det.getProducto().getCodigo());
				psDet.setInt(3, det.getCantidad());
				psDet.setBigDecimal(4, det.getProducto().getPrecioVenta());
				BigDecimal pv=det.getProducto().getPrecioVenta();
				BigDecimal cantidad=new BigDecimal(det.getCantidad());
				BigDecimal subtotal=pv.multiply(cantidad);
				psDet.setBigDecimal(5, subtotal);
				BigDecimal subtotalConIva=subtotal.multiply(new BigDecimal(1.12));
				if(det.getProducto().isTineIVA()){
					psDet.setBigDecimal(6, subtotalConIva);
				}else {
					psDet.setBigDecimal(6, subtotal);
				}
				
				
				psDet.executeUpdate();
			}
			
			
			
		} catch (SQLException e) {
			e.printStackTrace();
			throw new KrakeDevException("Error al insertar el venta. Detalle:"+e.getMessage());
		} catch (KrakeDevException e) {
			throw e;
		}finally {
			if(con!=null) {
			try {
				con.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
			}
		}
	}
	
	public void actualizar(CabeceraVentas ventas) throws KrakeDevException {
		Connection con = null;
		PreparedStatement ps=null;
		PreparedStatement psHis=null;
		
		Date fechaActual=new Date();
		Timestamp fechaHoraActual=new Timestamp(fechaActual.getTime());

		try {
			con=ConexionBDD.obtenerConexion();
			
			BigDecimal totalSinIva = BigDecimal.ZERO;
	        BigDecimal total = BigDecimal.ZERO;
			ArrayList<DetalleVentas> detallesVentas=ventas.getDetalles();
			DetalleVentas det=null;
			for(int i=0;i<detallesVentas.size();i++) {
				det=detallesVentas.get(i);
	
				BigDecimal subtotal = det.getPrecioVenta().multiply(BigDecimal.valueOf(det.getCantidad()));
	            if (!det.getProducto().isTineIVA()) {
	                totalSinIva = totalSinIva.add(subtotal);
	            }
			}
			BigDecimal iva = totalSinIva.multiply(BigDecimal.valueOf(1.12)); 
	        total = totalSinIva.add(iva);
	        
	        ps=con.prepareStatement("update cabecera_ventas set total_sin_iva=?, iva=?, total=? where codigo=?");
	        ps.setBigDecimal(1, totalSinIva);
	        ps.setBigDecimal(2, iva);
	        ps.setBigDecimal(3, total);
	        ps.setInt(4, ventas.getCodigo());
	        ps.executeUpdate();
			
			for(int i=0;i<detallesVentas.size();i++) {
				det=detallesVentas.get(i);
				
			psHis=con.prepareStatement("insert into historial_stock (fecha, referencia, producto, cantidad) "
					+ "values (?,?,?,?)",Statement.RETURN_GENERATED_KEYS);
			psHis.setTimestamp(1, fechaHoraActual);
			psHis.setString(2, "VENTA "+ventas.getCodigo());
			psHis.setInt(3,det.getProducto().getCodigo());
			psHis.setInt(4,det.getCantidad()*(-1));
			
			psHis.executeUpdate();
			
			ResultSet rsClave=null;
			int codigoCabecera=0;
			rsClave=ps.getGeneratedKeys();
			if(rsClave.next()) {
				codigoCabecera=rsClave.getInt(1);
			}
			}
		} catch (SQLException e) {
			e.printStackTrace();
			throw new KrakeDevException("Error al actualizar el venta. Detalle:"+e.getMessage());
		} catch (KrakeDevException e) {
			throw e;
		}finally {
			if(con!=null) {
			try {
				con.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
			}
		}
	}

}
